@page "/diario"
@rendermode InteractiveServer
@using SistemaEscolar.Models
@using SistemaEscolar.Services
@inject EducadorService EducadorService
@inject TurmaService TurmaService
@inject IJSRuntime JS
@using System.Text.Json

<PageTitle>Diário do Educador</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6 text-center">
            <div class="mb-4">
                <select class="form-select form-select-lg mb-3" @bind="EducadorSelecionadoId">
                    <option value="0">Selecione o educador</option>
                    @foreach (var educador in educadores)
                    {
                        <option value="@educador.Id">@educador.Nome</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        @if (educadorSelecionado != null)
        {
            @if (turmasComDiario.Count == 0)
            {
                <div class="col-12 text-center text-muted">Nenhuma turma encontrada para este educador.</div>
            }
            else
            {
                @foreach (var turma in turmasComDiario)
                {
                    <div class="col-md-4 mb-4 d-flex align-items-stretch">
                        <div class="card w-100 border-primary border-3 rounded-4" 
                             style="border-style: solid; min-height: 120px; cursor: pointer;"
                             @onclick="async () => await SelecionarTurma(turma)">
                            <div class="card-body text-center d-flex flex-column justify-content-center align-items-center">
                                <div class="fw-bold" style="font-size:1.2rem">@turma.TurmaNome</div>
                                @foreach (var disc in turma.Disciplinas)
                                {
                                    <div class="fw-bold" style="font-size:1.1rem">@disc</div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>

    @if (turmaSelecionada != null)
    {
        <div class="row mt-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">@turmaSelecionada.TurmaNome - Calendário</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <button class="btn btn-outline-primary" @onclick="MesAnterior">&lt;</button>
                            <h4>@dataAtual.ToString("MMMM yyyy")</h4>
                            <button class="btn btn-outline-primary" @onclick="ProximoMes">&gt;</button>
                        </div>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Dom</th>
                                    <th>Seg</th>
                                    <th>Ter</th>
                                    <th>Qua</th>
                                    <th>Qui</th>
                                    <th>Sex</th>
                                    <th>Sáb</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var primeiroDia = new DateTime(dataAtual.Year, dataAtual.Month, 1);
                                    var ultimoDia = primeiroDia.AddMonths(1).AddDays(-1);
                                    var diaInicial = primeiroDia.AddDays(-(int)primeiroDia.DayOfWeek);
                                }
                                @for (var semana = 0; semana < 6; semana++)
                                {
                                    <tr>
                                        @for (var dia = 0; dia < 7; dia++)
                                        {
                                            var data = diaInicial.AddDays(semana * 7 + dia);
                                            var diaAtual = data.Day;
                                            var mesAtual = data.Month == dataAtual.Month;
                                            var temRegistro = registros.ContainsKey(data.Date);
                                            var podeRegistrar = mesAtual && PodeRegistrarAula(data.DayOfWeek);
                                            var numeroStyle = "";
                                            if (temRegistro)
                                            {
                                                numeroStyle = "color: green; font-weight: bold;";
                                            }
                                            else if (podeRegistrar)
                                            {
                                                numeroStyle = "color: red;";
                                            }
                                            else if (!mesAtual)
                                            {
                                                numeroStyle = "color: #ccc;";
                                            }
                                            <td style="cursor: @(podeRegistrar ? "pointer" : "default")" 
                                                class="text-center dia-aula" 
                                                @onclick="() => SelecionarData(data, podeRegistrar)">
                                                <span style="@numeroStyle">@diaAtual</span>
                                                @if (podeRegistrar)
                                                {
                                                    <div class="small">
                                                        @foreach (var horario in horariosAula.Where(h => ConverterDiaSemana(h.DiaSemana) == data.DayOfWeek))
                                                        {
                                                            <div>@horario.NomeDisciplina (@horario.NumeroAula)ª</div>
                                                        }
                                                    </div>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                @if (dataSelecionada != null)
                {
                    <div class="card mt-3">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Registro de Aula - @dataSelecionada?.ToString("dd/MM/yyyy")</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label>Conteúdo da Aula:</label>
                                <textarea class="form-control" rows="4" @bind="registroAtual"></textarea>
                            </div>
                            <button class="btn btn-primary mt-3" @onclick="async () => await SalvarRegistro()">
                                Salvar Registro
                            </button>
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Lista de Estudantes</h5>
                        <button class="btn btn-sm btn-light" @onclick="MostrarFormularioEstudante">
                            <i class="fas fa-plus"></i> Adicionar
                        </button>
                    </div>
                    <div class="card-body">
                        @if (!estudantes.Any())
                        {
                            <p class="text-center text-muted my-3">Nenhum estudante cadastrado.</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Nome</th>
                                            <th class="text-center">Idade</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var estudante in estudantes.OrderBy(e => e.Nome))
                                        {
                                            <tr>
                                                <td>@estudante.Nome</td>
                                                <td class="text-center">@estudante.Idade</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (mostrarFormEstudante)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Adicionar Novo Estudante</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelarFormularioEstudante"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label class="form-label">Nome</label>
                        <input type="text" class="form-control" @bind="novoEstudante.Nome" />
                        @if (estudanteSubmitted && string.IsNullOrEmpty(novoEstudante.Nome))
                        {
                            <small class="text-danger">Nome é obrigatório</small>
                        }
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Idade</label>
                        <input type="number" class="form-control" @bind="novoEstudante.Idade" />
                        @if (estudanteSubmitted && novoEstudante.Idade <= 0)
                        {
                            <small class="text-danger">Idade é obrigatória</small>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarFormularioEstudante">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="SalvarNovoEstudante">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .dia-aula { cursor: pointer; }
    .dia-aula:hover { background-color: #f8f9fa; }
    .small { font-size: 0.7em; margin-top: 2px; }
    .modal { display: block; }
    .validation-message { color: red; font-size: 0.8em; margin-top: 0.25rem; }
    .input-validation-error { border-color: red; }
</style>

@code {
    private List<Educador> educadores = new();
    private int educadorSelecionadoId;
    private Educador? educadorSelecionado;
    private List<TurmaDiarioVM> turmasComDiario = new();
    private TurmaDiarioVM? turmaSelecionada;
    private Turma? turmaDadosField; // store full turma data to display students reliably
    private DateTime dataAtual = DateTime.Now;
    private DateTime? dataSelecionada;
    private List<Estudante> estudantes = new();
    private Dictionary<DateTime, string> registros = new();
    private string registroAtual = "";
    private List<Horario> horariosAula = new();
    private bool mostrarFormEstudante = false;
    private bool estudanteSubmitted = false;
    private Estudante novoEstudante = new();
    private const string DiarioStorageKey = "diario_registros";

    protected override async Task OnInitializedAsync()
    {
        educadores = EducadorService.ObterTodosEducadores();
    }

    private async Task OnEducadorChangedAsync()
    {
        educadorSelecionado = educadores.FirstOrDefault(e => e.Id == educadorSelecionadoId);
        turmasComDiario.Clear();
        turmaSelecionada = null;
        turmaDadosField = null;
        estudantes.Clear();
        if (educadorSelecionado != null)
        {
            var turmas = TurmaService.ObterTodasTurmas();
            foreach (var turma in turmas)
            {
                var diarios = TurmaService.ObterDisciplinasPorTurma(turma.Id)
                    .Where(d => d.Professor == educadorSelecionado.Nome)
                    .Select(d => d.Nome)
                    .Distinct()
                    .ToList();
                if (diarios.Any())
                {
                    turmasComDiario.Add(new TurmaDiarioVM
                    {
                        TurmaId = turma.Id,
                        TurmaNome = turma.Nome,
                        Disciplinas = diarios
                    });
                }
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SelecionarTurma(TurmaDiarioVM turma)
    {
        turmaSelecionada = turma;
        turmaDadosField = TurmaService.ObterTurmaPorId(turma.TurmaId);
        estudantes = turmaDadosField?.Estudantes?.ToList() ?? new List<Estudante>();
        horariosAula = TurmaService.ObterHorariosPorTurma(turma.TurmaId)
            .Where(h => turma.Disciplinas.Contains(h.NomeDisciplina))
            .ToList();
        registros = await CarregarRegistrosMockAsync(turma.TurmaId);
        dataSelecionada = null;
        registroAtual = "";
        StateHasChanged();
    }

    private async Task<Dictionary<DateTime, string>> CarregarRegistrosMockAsync(int turmaId)
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", DiarioStorageKey + turmaId);
        if (string.IsNullOrEmpty(json))
            return new Dictionary<DateTime, string>();

        try
        {
            var dict = JsonSerializer.Deserialize<Dictionary<string, string>>(json);
            return dict?.ToDictionary(kvp => DateTime.Parse(kvp.Key), kvp => kvp.Value) 
                ?? new Dictionary<DateTime, string>();
        }
        catch
        {
            return new Dictionary<DateTime, string>();
        }
    }

    private async Task SalvarRegistro()
    {
        if (dataSelecionada == null || turmaSelecionada == null) return;

        if (string.IsNullOrWhiteSpace(registroAtual))
        {
            registros.Remove(dataSelecionada.Value.Date);
        }
        else
        {
            registros[dataSelecionada.Value.Date] = registroAtual.Trim();
        }

        await SalvarRegistrosNoArmazenamento();
        StateHasChanged();
    }

    private void SelecionarData(DateTime data, bool podeRegistrar)
    {
        if (!podeRegistrar) return;
        dataSelecionada = data;
        registroAtual = registros.ContainsKey(data.Date) ? registros[data.Date] : "";
        StateHasChanged();
    }

    private bool PodeRegistrarAula(DayOfWeek diaSemana)
    {
        return horariosAula.Any(h => ConverterDiaSemana(h.DiaSemana) == diaSemana);
    }

    private void MostrarFormularioEstudante()
    {
        novoEstudante = new Estudante();
        estudanteSubmitted = false;
        mostrarFormEstudante = true;
    }

    private void CancelarFormularioEstudante()
    {
        mostrarFormEstudante = false;
        estudanteSubmitted = false;
        novoEstudante = new Estudante();
    }

    private void SalvarNovoEstudante()
    {
        estudanteSubmitted = true;
        if (string.IsNullOrEmpty(novoEstudante.Nome) || novoEstudante.Idade <= 0 || turmaSelecionada == null) return;

        // Ensure TurmaService updates internal data (mock)
        TurmaService.AdicionarEstudante(turmaSelecionada.TurmaId, novoEstudante);
        // Reload full turma data
        turmaDadosField = TurmaService.ObterTurmaPorId(turmaSelecionada.TurmaId);
        estudantes = turmaDadosField?.Estudantes?.ToList() ?? new List<Estudante>();
        CancelarFormularioEstudante();
        StateHasChanged();
    }

    private async Task SalvarRegistrosNoArmazenamento()
    {
        if (turmaSelecionada == null) return;
        var dict = registros.ToDictionary(kvp => kvp.Key.ToString("yyyy-MM-dd"), kvp => kvp.Value);
        var json = JsonSerializer.Serialize(dict);
        await JS.InvokeVoidAsync("localStorage.setItem", DiarioStorageKey + turmaSelecionada.TurmaId, json);
    }

    private void MesAnterior()
    {
        dataAtual = dataAtual.AddMonths(-1);
    }

    private void ProximoMes()
    {
        dataAtual = dataAtual.AddMonths(1);
    }

    private DayOfWeek ConverterDiaSemana(string diaSemana)
    {
        return diaSemana switch
        {
            "Segunda" => DayOfWeek.Monday,
            "Terça" => DayOfWeek.Tuesday,
            "Quarta" => DayOfWeek.Wednesday,
            "Quinta" => DayOfWeek.Thursday,
            "Sexta" => DayOfWeek.Friday,
            "Sábado" => DayOfWeek.Saturday,
            _ => DayOfWeek.Sunday
        };
    }

    private class TurmaDiarioVM
    {
        public int TurmaId { get; set; }
        public string TurmaNome { get; set; } = string.Empty;
        public List<string> Disciplinas { get; set; } = new();
    }

    private int EducadorSelecionadoId
    {
        get => educadorSelecionadoId;
        set
        {
            if (educadorSelecionadoId != value)
            {
                educadorSelecionadoId = value;
                _ = OnEducadorChangedAsync();
            }
        }
    }
}
