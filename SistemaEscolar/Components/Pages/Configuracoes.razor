@page "/configuracoes"
@rendermode InteractiveServer
@using SistemaEscolar.Services
@inject TurmaService TurmaService
@inject IJSRuntime JSRuntime

<PageTitle>Configurações</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="fas fa-cogs"></i> Configurações do Sistema</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Estatísticas do Sistema -->
                        <div class="col-md-6 mb-4">
                            <div class="card border-info">
                                <div class="card-header bg-info text-white">
                                    <h5 class="mb-0"><i class="fas fa-chart-bar"></i> Estatísticas</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row text-center">
                                        <div class="col-6">
                                            <div class="border-end">
                                                <h4 class="text-primary">@totalTurmas</h4>
                                                <small class="text-muted">Turmas</small>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <h4 class="text-success">@totalEstudantes</h4>
                                            <small class="text-muted">Estudantes</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Ações do Sistema -->
                        <div class="col-md-6 mb-4">
                            <div class="card border-warning">
                                <div class="card-header bg-warning text-dark">
                                    <h5 class="mb-0"><i class="fas fa-tools"></i> Ações do Sistema</h5>
                                </div>
                                <div class="card-body">
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-danger" @onclick="LimparCache" role="alert">
                                            <i class="fas fa-trash"></i> limpar Cache
                                        </button>
                                        <button type="button" class="btn btn-success" @onclick="GerarDados" disabled="@processando">
                                            @if (processando)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-plus-circle me-2"></i>
                                            }
                                            Gerar Dados Iniciais
                                        </button>
                                        
                                        <button type="button" class="btn btn-danger" @onclick="ResetarSistema" disabled="@processando">
                                            @if (processando)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-trash-alt me-2"></i>
                                            }
                                            Resetar Sistema
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Descrições das Ações -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card border-light">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0"><i class="fas fa-info-circle"></i> Informações</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6 class="text-success"><i class="fas fa-plus-circle"></i> Gerar Dados Iniciais</h6>
                                            <p class="text-muted small">
                                                Remove todos os dados existentes e cria um novo conjunto de turmas e estudantes fictícios para teste.
                                                Serão criadas 18 turmas (1º ao 3º ano, A a F) com estudantes aleatórios.
                                            </p>
                                        </div>
                                        <div class="col-md-6">
                                            <h6 class="text-danger"><i class="fas fa-trash-alt"></i> Resetar Sistema</h6>
                                            <p class="text-muted small">
                                                Remove TODOS os dados do sistema (turmas, estudantes, disciplinas e horários).
                                                Esta ação é irreversível e deixará o sistema completamente vazio.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(mensagem))
                    {
                        <div class="alert @(tipoMensagem == "success" ? "alert-success" : "alert-danger") alert-dismissible fade show mt-3" role="alert">
                            <i class="fas @(tipoMensagem == "success" ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
                            @mensagem
                            <button type="button" class="btn-close" @onclick="LimparMensagem"></button>
                        </div>
                    }
                    @* <div class="alert alert-success d-flex align-items-center" role="alert"
                         style="display:@(string.IsNullOrEmpty(AlertaMensagem) ? "none" : "flex")">
                        <i class="fas fa-check-circle ms-2"></i>
                        <span class="ms-2">@AlertaMensagem</span>
                    </div> *@
                </div>
            </div>
        </div>
    </div>
</div>

@code {







    private int totalTurmas = 0;
    private int totalEstudantes = 0;
    private bool processando = false;
    private string mensagem = string.Empty;
    private string tipoMensagem = "success";

    protected override void OnInitialized()
    {
        AtualizarEstatisticas();
    }

    private void AtualizarEstatisticas()
    {
        totalTurmas = TurmaService.ObterTotalTurmas();
        totalEstudantes = TurmaService.ObterTotalEstudantes();
        StateHasChanged();
    }

    private async Task GerarDados()
    {
        if (await ConfirmarAcao("Tem certeza que deseja gerar novos dados? Todos os dados existentes serão substituídos."))
        {
            processando = true;
            StateHasChanged();

            try
            {
                await Task.Delay(500); // Simula processamento
                TurmaService.GerarDadosIniciais();
                AtualizarEstatisticas();

                mensagem = "Dados iniciais gerados com sucesso! Sistema reinicializado com turmas e estudantes fictícios.";
                tipoMensagem = "success";
            }
            catch (Exception ex)
            {
                mensagem = $"Erro ao gerar dados: {ex.Message}";
                tipoMensagem = "error";
            }
            finally
            {
                processando = false;
                StateHasChanged();
            }
        }
    }

    private async Task ResetarSistema()
    {
        if (await ConfirmarAcao("ATENÇÃO: Esta ação irá remover TODOS os dados do sistema. Esta operação é irreversível. Deseja continuar?"))
        {
            processando = true;
            StateHasChanged();

            try
            {
                await Task.Delay(500); // Simula processamento
                TurmaService.ResetarSistema();
                AtualizarEstatisticas();

                mensagem = "Sistema resetado com sucesso! Todos os dados foram removidos.";
                tipoMensagem = "success";
            }
            catch (Exception ex)
            {
                mensagem = $"Erro ao resetar sistema: {ex.Message}";
                tipoMensagem = "error";
            }
            finally
            {
                processando = false;
                StateHasChanged();
            }
        }
    }
    private async Task LimparCache()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.clear");
        await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
        //await JSRuntime.InvokeVoidAsync("alert", "Cache limpo com sucesso!");

        mensagem = "Cache limpo com sucesso!";

        tipoMensagem = "success";

        StateHasChanged();
    }

    private async Task<bool> ConfirmarAcao(string mensagemConfirmacao)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", mensagemConfirmacao);
    }

    private void LimparMensagem()
    {
        mensagem = string.Empty;
        StateHasChanged();
    }
}