@page "/configuracao"
@rendermode InteractiveServer
@inject IJSRuntime JS


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-lg border-0 rounded-3">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="fas fa-cogs me-2"></i>Configurações do sistema</h4>
                </div>
                <div class="card-body">
                    <button class="btn btn-danger" @onclick="LimparCache">
                        <i class="fas fa-trash"></i> limpar Cache
                    </button>
                    <button class="btn btn-outline-danger" @onclick="LimparCache">
                        <i class="fas fa-trash"></i> Gerar Turmas
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs mb-3">
    <li class="nav-item">
        <a class="nav-link active" data-bs-toggle="tab" href="#geral">Geral</a>
    </li>
</ul>

@* <div class="tab-content">
    <div class="tab-pane fade show active" id="geral">
        <MudBlazor.MudButton Color="MudBlazor.Color.Primary" Variant="MudBlazor.Variant.Filled">
        <MudBlazor.MudIcon Icon="fas fa-trash" /> Limpar Cache
        </MudBlazor.MudButton>
    </div>
</div> *@

<div class="alert alert-success d-flex align-items-center" role="alert"
        style="display:@(string.IsNullOrEmpty(alertMessage) ? "none" : "flex")">
    <i class="fas fa-check-circle ms-2"></i>
    <span class="ms-2">@alertMessage</span>
</div>

<button class="btn btn-danger mt-3" @onclick="LimparCache">
    <i class="fas fa-trash"></i> Limpar Cache
</button>


@code {
    private string? alertMessage;

    private async Task LimparCache()
    {
        await JS.InvokeVoidAsync("localStorage.clear");
        await JS.InvokeVoidAsync("sessionStorage.clear");
        //await JS.InvokeVoidAsync("alert", "Cache limpo com sucesso!");

        alertMessage = "Cache limpo com sucesso!";

        StateHasChanged();
    }
}
